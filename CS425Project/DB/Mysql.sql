CREATE TABLE Parent
(
  P_ID INT NOT NULL AUTO_INCREMENT,
  First_Name VARCHAR(25) NOT NULL,
  Last_Name VARCHAR(30) NOT NULL,
  Street VARCHAR(30) NOT NULL,
  Pin INT NOT NULL,
  city VARCHAR(25) NOT NULL,
  State VARCHAR(25) NOT NULL,
  P_Email_ID VARCHAR(40) NOT NULL,
  P_Relation VARCHAR(15) NOT NULL,
  PRIMARY KEY (P_ID),
  UNIQUE (P_Email_ID)
);

CREATE TABLE Program
(
  Pgm_ID INT NOT NULL AUTO_INCREMENT,
  Pgm_Name VARCHAR(50) NOT NULL,
  Pgm_credits INT NOT NULL,
  PRIMARY KEY (Pgm_ID)
);

CREATE TABLE Department
(
  D_ID INT NOT NULL AUTO_INCREMENT,
  D_Name INT NOT NULL,
  PRIMARY KEY (D_ID)
);

CREATE TABLE Book
(
  B_ID INT NOT NULL AUTO_INCREMENT,
  B_Grp_ID INT NOT NULL,
  B_Name VARCHAR(40) NOT NULL,
  B_Edition INT NOT NULL,
  B_Authour VARCHAR(40) NOT NULL,
  B_Publisher VARCHAR(40) NOT NULL,
  B_Price FLOAT NOT NULL,
  PRIMARY KEY (B_ID)
);

CREATE TABLE Parent_P_PhoneNumber
(
  P_PhoneNumber INT NOT NULL,
  P_ID INT NOT NULL,
  PRIMARY KEY (P_PhoneNumber, P_ID),
  FOREIGN KEY (P_ID) REFERENCES Parent(P_ID)
);

CREATE TABLE Courses
(
  C_ID INT NOT NULL AUTO_INCREMENT, 
  C_Name VARCHAR(50) NOT NULL,
  Staff_ID INT NOT NULL,
  C_Credit INT NOT NULL,
  Pgm_ID INT NOT NULL,
  D_ID INT NOT NULL,
  PRIMARY KEY (C_ID),
  FOREIGN KEY (Pgm_ID) REFERENCES Program(Pgm_ID),
  FOREIGN KEY (D_ID) REFERENCES Department(D_ID)
);

CREATE TABLE Staff
(
  Staff_ID INT NOT NULL AUTO_INCREMENT,
  D_ID INT NOT NULL,
  First_Name VARCHAR(25) NOT NULL,
  Last_Name VARCHAR(25) NOT NULL,
  City VARCHAR(20) NOT NULL,
  State VARCHAR(30) NOT NULL,
  Pin INT NOT NULL,
  Street VARCHAR(30) NOT NULL,
  Staff_Email_ID VARCHAR(40) NOT NULL,
  Staff_DOB DATE NOT NULL,
  Staff_DOJ DATE NOT NULL,
  Staff_DOE DATE NOT NULL,
  D_ID INT NOT NULL,
  PRIMARY KEY (Staff_ID),
  FOREIGN KEY (D_ID) REFERENCES Department(D_ID),
  UNIQUE (Staff_Email_ID)
);

CREATE TABLE teachs
(
  Staff_ID INT NOT NULL ,
  C_ID INT NOT NULL,
  PRIMARY KEY (Staff_ID, C_ID),
  FOREIGN KEY (Staff_ID) REFERENCES Staff(Staff_ID),
  FOREIGN KEY (C_ID) REFERENCES Courses(C_ID)
);

CREATE TABLE Courses_C_Prereq
(
  C_Prereq INT NOT NULL,
  C_ID INT NOT NULL,
  PRIMARY KEY (C_Prereq, C_ID),
  FOREIGN KEY (C_ID) REFERENCES Courses(C_ID)
);

CREATE TABLE Staff_Staff_PhoneNumber
(
  Staff_PhoneNumber INT NOT NULL,
  Staff_ID INT NOT NULL,
  PRIMARY KEY (Staff_PhoneNumber, Staff_ID),
  FOREIGN KEY (Staff_ID) REFERENCES Staff(Staff_ID)
);

CREATE TABLE Student
(
  S_ID INT NOT NULL AUTO_INCREMENT,
  S_Email_ID VARCHAR(40) NOT NULL,
  Pgm_ID INT NOT NULL,
  P_ID INT NOT NULL,
  S_DOB DATE NOT NULL,
  First_Name VARCHAR(25) NOT NULL,
  Last_Name VARCHAR(30) NOT NULL,
  State VARCHAR(30) NOT NULL,
  City VARCHAR(20) NOT NULL,
  Pin INT NOT NULL,
  Street VARCHAR(40) NOT NULL,
  S_Advisor VARCHAR(30) NOT NULL,
  S_YOJ DATE NOT NULL,
  S_Type VARCHAR(30) NOT NULL,
  P_ID INT NOT NULL,
  Pgm_ID INT NOT NULL,
  Staff_ID INT NOT NULL,
  PRIMARY KEY (S_ID),
  FOREIGN KEY (P_ID) REFERENCES Parent(P_ID),
  FOREIGN KEY (Pgm_ID) REFERENCES Program(Pgm_ID),
  FOREIGN KEY (Staff_ID) REFERENCES Staff(Staff_ID),
  UNIQUE (S_Email_ID)
);

CREATE TABLE Enrollment
(
  S_ID INT NOT NULL,
  C_ID INT NOT NULL,
  DOE DATE NOT NULL,
  DOC DATE NOT NULL,
  Grade CHAR(3) NOT NULL,
  GPA FLOAT NOT NULL,
  S_ID INT NOT NULL,
  C_ID INT NOT NULL,
  PRIMARY KEY (S_ID, C_ID),
  FOREIGN KEY (S_ID) REFERENCES Student(S_ID),
  FOREIGN KEY (C_ID) REFERENCES Courses(C_ID)
);

CREATE TABLE Borrowed
(
  DOI DATE NOT NULL,
  DueDate DATE NOT NULL,
  B_Issued INT NOT NULL,
  B_Grp_ID INT NOT NULL,
  DOR DATE NOT NULL,
  S_ID INT NOT NULL,
  B_ID VARCHAR(30) NOT NULL,
  B_ID VARCHAR(30) NOT NULL,
  S_ID INT NOT NULL,
  PRIMARY KEY (B_ID, S_ID),
  FOREIGN KEY (B_ID) REFERENCES Book(B_ID),
  FOREIGN KEY (S_ID) REFERENCES Student(S_ID)
);

CREATE TABLE Student_S_PhoneNumber
(
  S_PhoneNumber INT NOT NULL,
  S_ID INT NOT NULL,
  PRIMARY KEY (S_PhoneNumber, S_ID),
  FOREIGN KEY (S_ID) REFERENCES Student(S_ID)
);
